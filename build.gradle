import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*


buildscript {
  ext {
    depVersion = [
      gradle_docker_plugin: "3.6.1",
      gradle_node_plugin: "1.2.0"
    ]
  }
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }
  dependencies {
    classpath "com.bmuschko:gradle-docker-plugin:${depVersion.gradle_docker_plugin}"
    classpath "com.moowork.gradle:gradle-node-plugin:${depVersion.gradle_node_plugin}"
  }
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.moowork.node'
apply plugin: 'base'


version '0.1.0'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

node {
  version = '8.12.0'
  npmVersion = '6.4.1'
  download = true
  workDir = file("${project.buildDir}/node")
  nodeModulesDir = file("${project.projectDir}")
}
 
task dist(type: NpmTask) {
  // args = ['run', 'build', '--prod']
}
 
// dist.dependsOn(npm_install)

task createDockerfile(type: Dockerfile){
    destFile = project.file('docker/Dockerfile')
   
    from 'node:alpine'

    // NOTE: Creating a directory for the app 
    instruction "RUN mkdir -p /usr/src/app"
    workingDir("/usr/src/app")

    // NOTE: Installing node.js http-server for deploying 
    instruction "RUN npm install -g http-server"

    // NOTE: Bundle the app source 
    instruction "COPY . /usr/src/app"

    // NOTE: Install Angular CLI 
    instruction "RUN npm install -g @angular/cli"

    // NOTE: Installing dependencies 
    copyFile("package.json", "/usr/src/app/package.json")
    instruction "RUN npm install"
    
    instruction 'CMD ["ng", "build", "--prod" ]'
    instruction 'EXPOSE 8080'

    // NOTE: Deploying into node's http-server
    instruction 'CMD ["cd", "/usr/src/app/dist"] '
    instruction '"CMD [ "http-server", "-p", "8080"]'
}

task buildImage(type: DockerBuildImage, dependsOn: 'createDockerfile'){
    inputDir = project.file(".")
    dockerFile = createDockerfile.destFile
    imageId = 'emcmongoose/mongoose-console'
    tags = ['emcmongoose/mongoose-console:$CONSOLE_VER', 'emcmongoose/mongoose-console:latest']
    doLast { 
        clearProductionFiles()
    }
}

task tagImage(type: DockerTagImage, dependsOn: 'buildImage'){
    targetImageId { buildImage.getImageId() }
    tag 'mongoose-console'
    repository 'mongoose-console'
}

task pushImage(type: DockerPushImage, dependsOn: 'tagImage'){
    imageName 'emcmongoose/mongoose-console'
}

// Leaving "clear" task so it could be configured lately. Remaining clearProductionFiles() as a function in order ...
// ... to call it within other independent tasks. 
task clear() {
    clearProductionFiles()
}

clean.dependsOn clear

def clearProductionFiles() { 
 delete 'docker'
}

