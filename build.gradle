import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

apply plugin: 'js'
apply plugin: 'css'
apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'

buildscript {
    ext {
        depVersion = [
                gradle_css_plugin: "[1,)",
                gradle_js_plugin: "[1,)",
                gradle_docker_plugin: "3.6.1",
                jquery: "[3,)",
                bootstrap: "[4,)",
                popper: "1.14.4",     //was "[1,)"
                requirejs: "2.1.22",
                requirejs_text: "[2,)",
                pace: "1.0.2",
                handlebars: "4.0.2",
                d3js: "3.5.3"
        ]
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.eriwen:gradle-css-plugin:${depVersion.gradle_css_plugin}"
        classpath "com.eriwen:gradle-js-plugin:${depVersion.gradle_js_plugin}"
        classpath "com.bmuschko:gradle-docker-plugin:${depVersion.gradle_docker_plugin}"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    runtime
}

dependencies {
    runtime(
            "org.webjars:jquery:${depVersion.jquery}",
            "org.webjars:bootstrap:${depVersion.bootstrap}",
            "org.webjars:popper.js:${depVersion.popper}",
            "org.webjars:requirejs:${depVersion.requirejs}",
            "org.webjars:requirejs-text:${depVersion.requirejs_text}",
            "org.webjars:pace:${depVersion.pace}",
            "org.webjars:handlebars:${depVersion.handlebars}",
            "org.webjars:d3js:${depVersion.d3js}"
    )
}

task dist(type: Copy){
    from configurations.runtime.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    into "lib"
}

task createDockerfile(type: Dockerfile, dependsOn: 'dist'){
    destFile = project.file('docker/Dockerfile')
    from 'nginx:alpine'
    addFile("src/main/webapp/.", "/usr/share/nginx/html")
    addFile("lib/META-INF/resources/.", "/usr/share/nginx/html")
    addFile("lib/META-INF/resources/webjars/popper.js/${depVersion.popper}/", "/usr/share/nginx/html")
}

task buildImage(type: DockerBuildImage, dependsOn: 'createDockerfile'){
    inputDir = project.file(".")
    dockerFile = createDockerfile.destFile
    imageId = 'emcmongoose/mongoose-console'
    tag = 'emcmongoose/mongoose-console:0.1.0'
}

docker {
    registryCredentials {
        username = 'mandarinka'
        password = '521600Fkbyf'
    }
}

task tagImage(type: DockerTagImage, dependsOn: 'buildImage'){
    targetImageId { buildImage.getImageId() }
    tag 'mongoose-console'
    repository 'mongoose-console'
}

task pushImage(type: DockerPushImage, dependsOn: 'tagImage'){
    imageName 'mandarinka/mongoose-console'
}
