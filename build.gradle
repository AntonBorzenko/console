import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*


buildscript {
  ext {
    CONSOLE_PORT = '${CONSOLE_PORT}'
    depVersion = [
      gradle_docker_plugin: "3.6.1",
      gradle_node_plugin: "1.2.0",
    ]
  }
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }
  dependencies {
    classpath "com.bmuschko:gradle-docker-plugin:${depVersion.gradle_docker_plugin}"
    classpath "com.moowork.gradle:gradle-node-plugin:${depVersion.gradle_node_plugin}"
  }
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.moowork.node'
apply plugin: 'base'


version '0.1.0'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

node {
  version = '8.12.0'
  npmVersion = '6.4.1'
  download = true
  workDir = file("${project.buildDir}/node")
  nodeModulesDir = file("${project.projectDir}")
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('docker/Dockerfile')
   
   // NOTE: We're using multistage building to separate containers with code and with production angular-generated files. 
  
    // NOTE: Stage 1 - building the angular application (Mongoose Console) 
    from 'node:8.11.2-alpine as builder'
    workingDir("/usr/src/app")
    copyFile("package.json", "./")
    instruction "RUN npm install"
    copyFile(".", ".")
    instruction "RUN npm run build"

    // NOTE: Stage 2 - serving the app via Node.js server 
    from 'node:alpine'
    // NOTE: Copying the angular-generated files from builder image
    instruction "COPY --from=builder /usr/src/app/dist/mongoose-console ."

    // NOTE: Serving the app via Node.js server
    instruction "COPY --from=builder /usr/src/app/server/node-server.js ."
    instruction "RUN npm install express"
    instruction "EXPOSE ${CONSOLE_PORT}"
    instruction 'CMD [ "node", "node-server.js" ]' 
}

task buildImage(type: DockerBuildImage, dependsOn: 'createDockerfile') {
    inputDir = project.file(".")
    dockerFile = createDockerfile.destFile
    imageId = 'emcmongoose/mongoose-console'
    // TODO: Fix hard-coded "0.1.0" image tag. It's implicitly set because gradle didn't recognize ...
    // ... the environment variable.
    tags = ['emcmongoose/mongoose-console:0.1.0', 'emcmongoose/mongoose-console:latest']
    doLast { 
        clearProductionFiles()
    }
}

task tagImage(type: DockerTagImage, dependsOn: 'buildImage') {
    targetImageId { buildImage.getImageId() }
    tag 'mongoose-console'
    repository 'mongoose-console'
}

task pushImage(type: DockerPushImage, dependsOn: 'tagImage'){
    imageName 'emcmongoose/mongoose-console'
}

// Leaving "clear" task so it could be configured lately. Remaining clearProductionFiles() as a function in order ...
// ... to call it within other independent tasks. 
task clear() {
    clearProductionFiles()
}

clean.dependsOn clear

def clearProductionFiles() { 
 delete 'docker'
}

