import { BehaviorSubject } from "rxjs";

export class MongooseSetupInfoModel {


    configuration: any; // NOTE: Configuration is represented with JSON 
    scenario: String; // NOTE: As for 22.02.2019, 'Scenario' is a JavaScript code
    nodesData: String[]; 

    private readonly DEFAULT_CONFIGURATION = "";
    private readonly DEFAULT_SCENARIO = "Load.run();";

    // MARK: Getters & Setters

    public setLoadStepId(loadStepId: String) { 
        this.configuration.load.step.id = loadStepId; 
        this.configuration.load.step.idAutoGenerated = false; 
    }

    public getTargetRunPort(): String {
        let targetPort = ""; 
        try {
            targetPort = this.configuration.run.port;
        } catch (error) { 
            let misleadingMsg = "Unable to get Mongoose Run target port from configuration."
            console.error(misleadingMsg);
        }
        return targetPort;
    }

    public getLoadStepId(): String { 
        return this.configuration.load.step.id;
    }

    // MARK: - Constructor
    constructor(observableSlaveNodes: BehaviorSubject<String[]>) { 
        this.configuration = this.DEFAULT_CONFIGURATION;
        this.scenario = this.DEFAULT_SCENARIO;
        observableSlaveNodes.subscribe(slaveNodes => { 
            this.nodesData = slaveNodes;
        })
    }

    // MARK: - Public 
    public hasLoadStepId(): boolean { 
        let loadStepId = this.configuration.load.step.id; 
        let emptyValue = ""; 
        return ((loadStepId != undefined) && (loadStepId != emptyValue));
    }
}